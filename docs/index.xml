<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Yewentao&#39;s Blog</title>
        <link>https://yewentao256.github.io/</link>
        <description>yewentao&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>zhyanwentao@outlook.com (yewentao)</managingEditor>
            <webMaster>zhyanwentao@outlook.com (yewentao)</webMaster><lastBuildDate>Fri, 23 Jun 2023 10:41:24 &#43;0800</lastBuildDate>
            <atom:link href="https://yewentao256.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Shell_lab</title>
    <link>https://yewentao256.github.io/posts/csapp/shell_lab/</link>
    <pubDate>Fri, 23 Jun 2023 10:41:24 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/csapp/shell_lab/</guid>
    <description><![CDATA[In this lab, we&rsquo;ll become more familiar with the concepts of process control and signal by writing a simple Unix shell program that supports job control. Source code: [https://github.com/yewentao256/CSAPP_15213/tree/main/shelllab]]]></description>
</item>
<item>
    <title>How Pytorch 2.0 Call Ops(3)</title>
    <link>https://yewentao256.github.io/posts/pytorch/how_pytorch_call_op_3/</link>
    <pubDate>Sat, 13 May 2023 09:53:09 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/pytorch/how_pytorch_call_op_3/</guid>
    <description><![CDATA[This article introduces the process of pytorch 2.0 calling ops, using <code>contiguous</code> as an example.]]></description>
</item>
<item>
    <title>How Pytorch 2.0 Call Ops(2)</title>
    <link>https://yewentao256.github.io/posts/pytorch/how_pytorch_call_op_2/</link>
    <pubDate>Wed, 12 Apr 2023 09:53:09 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/pytorch/how_pytorch_call_op_2/</guid>
    <description><![CDATA[This article introduces the process of pytorch 2.0 calling ops, using <code>contiguous</code> as an example.]]></description>
</item>
<item>
    <title>How Pytorch 2.0 Call Ops(1)</title>
    <link>https://yewentao256.github.io/posts/pytorch/how_pytorch_call_op_1/</link>
    <pubDate>Sat, 11 Mar 2023 09:53:09 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/pytorch/how_pytorch_call_op_1/</guid>
    <description><![CDATA[This article introduces the process of pytorch 2.0 calling ops, using <code>contiguous</code> as an example.]]></description>
</item>
<item>
    <title>Tensor Memory Format</title>
    <link>https://yewentao256.github.io/posts/pytorch/memory_format/</link>
    <pubDate>Sat, 04 Mar 2023 09:52:50 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/pytorch/memory_format/</guid>
    <description><![CDATA[This article will introduce the two commonly used forms of memory storage in pytorch: <strong>NCHW</strong> and <strong>NHWC</strong> (channel-last)]]></description>
</item>
<item>
    <title>Cachelab</title>
    <link>https://yewentao256.github.io/posts/csapp/cachelab/</link>
    <pubDate>Sun, 19 Feb 2023 14:56:21 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/csapp/cachelab/</guid>
    <description><![CDATA[In this lab, we will write a small C program that simulates the behavior of a cache memory and optimize a small matrix transpose function. Source: [https://github.com/yewentao256/CSAPP_15213/tree/main/cachelab]]]></description>
</item>
<item>
    <title>CSAPP_class_notes</title>
    <link>https://yewentao256.github.io/posts/csapp/csapp_class_notes/</link>
    <pubDate>Fri, 03 Feb 2023 19:52:49 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/csapp/csapp_class_notes/</guid>
    <description><![CDATA[My note while learning through CSAPP-15213 videos. Including Overview, Bits, Bytes, and Integers, Floating Point, Machine Level Programing, Program Optimization and Memory. Source: [https://github.com/yewentao256/CSAPP_15213]]]></description>
</item>
<item>
    <title>Attacklab</title>
    <link>https://yewentao256.github.io/posts/csapp/attacklab/</link>
    <pubDate>Fri, 03 Feb 2023 16:41:42 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/csapp/attacklab/</guid>
    <description><![CDATA[Attacklab from CSAPP 15213, including P1-Code Injection Attacks and P2-Return-Oriented Programming. It&rsquo;s a little bit hard, please be patient and gradually find your way out, best wishes! Source: [https://github.com/yewentao256/CSAPP_15213/tree/main/attacklab]]]></description>
</item>
<item>
    <title>Bomblab</title>
    <link>https://yewentao256.github.io/posts/csapp/bomblab/</link>
    <pubDate>Fri, 03 Feb 2023 14:57:35 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/csapp/bomblab/</guid>
    <description><![CDATA[Bomblab from CSAPP 15213, including 6 normal phases and 1 extra secret-phase. It&rsquo;s a little bit hard, please be patient and gradually find your way out, good luck! Source: [https://github.com/yewentao256/CSAPP_15213/tree/main/bomblab]]]></description>
</item>
<item>
    <title>Understand Dynamic Programming</title>
    <link>https://yewentao256.github.io/posts/algorithm/dynamic-programming/</link>
    <pubDate>Fri, 11 Mar 2022 11:13:50 &#43;0800</pubDate>
    <author>yewentao</author>
    <guid>https://yewentao256.github.io/posts/algorithm/dynamic-programming/</guid>
    <description><![CDATA[Understand dynamic programming based on two real examples]]></description>
</item>
</channel>
</rss>
